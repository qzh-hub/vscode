class Solution {
public:
    TreeNode* build(vector<int> pre, int l1, int r1, vector<int> vin, int l2, int r2){
        if(l1 > r1 || l2 > r2)
            return nullptr;
        TreeNode* node = new TreeNode(pre[l1]);
        int i = l2;
        while(vin[i] != pre[l1])
            i ++;
        node->left = build(pre, l1 + 1, l1 + i - l2, vin, l2, i - 1);
        node->right = build(pre, l1 + i - l2 + 1, r1, vin, i + 1, r2);
        return node;
    }
    vector<int> solve(vector<int>& xianxu, vector<int>& zhongxu) {
        TreeNode* root = build(xianxu, 0, xianxu.size() - 1, zhongxu, 0, zhongxu.size() - 1);
        vector<int> res;
        queue<TreeNode* > q;
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            while(size > 0){
                TreeNode* node = q.front();
                q.pop();
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
                if(size == 1)
                    res.emplace_back(node->val);
                size --;
            }
        }
        return res;
    }
};