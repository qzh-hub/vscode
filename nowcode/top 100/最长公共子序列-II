class Solution {
public:
    /**
     * longest common subsequence
     * @param s1 string字符串 the string
     * @param s2 string字符串 the string
     * @return string字符串
     */
    string LCS(string s1, string s2) {
        // write code here
        int n1 = s1.size(), n2 = s2.size();
        string res;
        vector<vector<int>> dp(n1 + 1, vector<int>(n2 + 1, 0));
        for(int i = 1; i <= n1; i ++){
            for(int j = 1; j <= n2; j ++){
                if(s1[i - 1] == s2[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                }else{
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }                
            }
        }
        for(int i = n1, j = n2; dp[i][j] >= 1;){
            if(s1[i - 1] == s2[j - 1]){
                res += s1[i - 1];
                i --;
                j --;
            }else{
                if(dp[i - 1][j] > dp[i][j - 1])
                    i --;
                else    
                    j --;
            }
        }
        reverse(res.begin(), res.end());
        return res.empty() ? "-1" : res;
    }
};