/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 回溯，未通过
    // int res = 0;
    // void backtrace(TreeNode* root, int targetSum, int cur){
    //     cur += root->val;
    //     if(cur == targetSum){
    //         res ++;
    //         //return;
    //         cout << root->val << endl;
    //     }

    //     if(root->left){
    //         //cout << "left : " << root->val << " " << cur << endl;
    //         backtrace(root->left, targetSum, cur);
    //         cur -= root->val;
    //     }
    //     if(root->right){
    //        // cout << "right : " << root->val << " " << cur << endl;
    //         backtrace(root->right, targetSum, cur);
    //         cur -= root->val;
    //     }
    // }
    // int pathSum(TreeNode* root, int targetSum) {
    //     if(root == nullptr)
    //         return 0;
    //     backtrace(root, targetSum, 0);
    //     //cout << "root : " << root->val << " " << res << endl;
    //     pathSum(root->left, targetSum);
    //     //cout << "left : " << root->val << " " << res << endl;
    //     pathSum(root->right, targetSum);
    //     //cout << "right : " << root->val << " " << res << endl;
    //     return res;
    // }
    int res;
    void dfs(TreeNode* root, int targetSum){
        if(root == nullptr)
            return;
        targetSum -= root->val;
        if(targetSum == 0)
            res ++;
        dfs(root->left, targetSum);
        dfs(root->right, targetSum);
    }
    int pathSum(TreeNode* root, int targetSum) {
        if(root == nullptr)
            return 0;
        dfs(root, targetSum);       
        pathSum(root->left, targetSum);
        pathSum(root->right, targetSum);
        return res;
    }
};