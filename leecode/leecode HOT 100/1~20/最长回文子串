// 中心扩散
class Solution {
public:
    pair<int, int> expand(const string& s, int left, int right){
        while(left>=0 && right<s.size() && s[left]==s[right]){
            left --;
            right ++;
        }
        return {left+1, right-1};
    }
    string longestPalindrome(string s) {
        int end = 0, start = 0;
        for(int i = 0; i < s.size(); i ++){
            auto [left1, right1] = expand(s, i, i);
            auto [left2, right2] = expand(s, i, i+1);
            if(right1-left1 > end-start){
                end = right1;
                start = left1;
            }
            if(right2-left2 > end-start){
                end = right2;
                start = left2;
            }
        }
        return s.substr(start, end-start+1);
    }

    // 动态规划
    string longestPalindrome(string s) {
        int len = s.size();
        int left = 0, right = 0;
        vector<vector<int>> dp(len, vector<int>(len, 0));
        for(int i = len - 1; i >= 0; i --){
            for(int j = i; j < len; j ++){
                if(s[i] == s[j]){
                    if(j - i <= 1)
                        dp[i][j] = 1;
                    else
                        dp[i][j] = dp[i + 1][j - 1];
                }
                if(dp[i][j] == 1 && j - i > right - left){
                    left = i;
                    right = j;
                }                   
            }
        }
        return s.substr(left, right - left + 1);
    }
};