class Solution {
public:
    bool isMatch(string s, string p) {
        int l1 = s.size(), l2 = p.size();
        vector<vector<int>> dp(l1+1, vector<int>(l2+1));
        auto matches = [=](int i, int j){
            if(i == 0)
                return false;
            if(p[j-1] == '.')
                return true;
            return s[i-1]==p[j-1];
        };
        dp[0][0] = true;
        for(int i = 0; i <= l1; i ++){
            for(int j = 1; j <= l2; j ++){
                if(p[j-1] == '*'){
                    dp[i][j] = dp[i][j-2]; 
                    if(matches(i, j-1))
                        dp[i][j] = (dp[i-1][j]|dp[i][j-2]);
                }else{
                    if(matches(i, j))
                        dp[i][j] = dp[i-1][j-1];
                }
            }
        }
        return dp[l1][l2];
    }


    class Solution {
public:
    bool isMatch(string s, string p) {
        int l1 = s.size(), l2 = p.size();
        vector<vector<int>> dp(l1 + 1, vector<int>(l2 + 1));
        dp[0][0] = 1;
        for(int j = 2; j <= l2; j ++){
            if(p[j - 1] == '*')
                dp[0][j] = dp[0][j - 2];
        }       
        for(int i = 1; i <= l1; i ++){
            for(int j = 1; j <= l2; j ++){
                if(s[i - 1] == p[j - 1] || p[j - 1] == '.')
                    dp[i][j] = dp[i - 1][j - 1];
                else if(p[j - 1] == '*'){
                    if(s[i - 1] != p[j - 2] && p[j - 2] != '.')
                        dp[i][j] = dp[i][j - 2];
                    else    
                        dp[i][j] = dp[i - 1][j] || dp[i][j - 2];
                }           
            }
        }
        // for(int i = 1; i <= l1; i ++){
        //     for(int j = 1; j <= l2; j ++){
        //         cout << dp[i][j] << " ";
        //     }
        //     cout << endl;
        // }
        return dp[l1][l2];
    }
};
};