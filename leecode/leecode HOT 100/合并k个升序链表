/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* _merge(ListNode* l1, ListNode* l2){
        ListNode* head = new ListNode(0);
        ListNode* cur = head;
        while(l1 || l2){
            ListNode* tmp = new ListNode(0);
            if(l1 == nullptr){
                cur->next = l2;
                break;
            }               
            else if(l2 == nullptr){
                cur->next = l1;
                break;
            }    
            else{
                if(l1->val > l2->val){
                    tmp->val = l2->val;
                    l2 = l2->next;
                    cur->next = tmp;
                    cur = tmp;
                }else{
                    tmp->val = l1->val;
                    l1 = l1->next;
                    cur->next = tmp;
                    cur = tmp;
                }
            }
        }
        return head->next;
    }
    ListNode* merge(vector<ListNode*>& lists, int left, int right){
        if(lists.size() == 0)
            return 0;
        if(left == right)
            return lists[left];
        int mid = left + (right - left) / 2;
        ListNode* l1 = merge(lists, left, mid);
        ListNode* l2 = merge(lists, mid + 1, right);
        return _merge(l1, l2);
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {      
        return merge(lists, 0, lists.size()-1);              
    }
};