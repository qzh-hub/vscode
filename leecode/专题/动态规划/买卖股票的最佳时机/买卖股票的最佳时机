class Solution {
public:
    // 贪心
    int maxProfit(vector<int>& prices) {
        if(prices.size() == 1)
            return 0;
        vector<int> dp(prices.size(), 0);
        int minprice = prices[0];
        for(int i = 1; i < prices.size(); i ++){
            dp[i] = max(prices[i] - minprice, dp[i - 1]);
            minprice = min(minprice, prices[i]);
        }
        return dp[prices.size() - 1];
    }


    // 动态规划
    int maxProfit(vector<int>& prices) {
        if(prices.size() == 1)
            return 0;
        vector<vector<int>> dp(prices.size(), vector<int>(2, 0));
        dp[0][0] = -prices[0];
        for(int i = 1; i < prices.size(); i ++){
            dp[i][0] = max(dp[i - 1][0], -prices[i]);
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i]);
        }
        return dp[prices.size() - 1][1];
    }
};