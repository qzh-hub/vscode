class Solution {
private:
    void dfs(vector<vector<char>>& grid, int r, int c) {
        int n = grid.size(), m = grid[0].size();
        if(r < 0 || r == n || c < 0 || c == m)
            return;
        if(grid[r][c] == '1'){
            grid[r][c] = '0';
            if(r - 1 >= 0 && grid[r - 1][c] == '1')
                dfs(grid, r - 1, c);
            if(c - 1 >= 0 && grid[r][c - 1] == '1')
                dfs(grid, r, c - 1);
            if(r + 1 < n && grid[r + 1][c] == '1')
                dfs(grid, r + 1, c);
            if(c + 1 < m && grid[r][c + 1] == '1')
                dfs(grid, r, c + 1);
        }
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int res = 0;
        for(int i = 0; i < n; i ++){
            for(int j = 0; j < grid[0].size(); j ++){
                if(grid[i][j] == '1'){
                    res ++;
                    dfs(grid, i, j);
                }
            }
        }
        return res;
    }

};