class Solution {
public:
    bool canJump(vector<int>& nums) {
        // 动态规划
        /*int n = nums.size();
        vector<bool> dp(n, 0);
        dp[n - 1] = 1;
        // 从后往前遍历，dp[i] = dp[i + 1] | dp[i + 2] | ... | dp[i + nums[i]]
        for(int i = n - 2; i >= 0; i --){
            for(int j = min(i + nums[i], n - 1); j > i; j --){
                if(dp[j] == 1){
                    dp[i] = 1;
                    continue;
                }
            }
        }
        return dp[0];*/

        // 贪心
        if(nums.size() == 1)
            return true;
        int range = 0;
        for(int i = 0; i <= range; i ++){
            range = max(range, nums[i] + i);
            if(range >= nums.size() - 1)
                return true;           
        }
        return false;
    }
};