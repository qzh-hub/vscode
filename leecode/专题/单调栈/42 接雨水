class Solution {
public:
    // 单调栈（自己的解法，有些繁琐）
    int trap(vector<int>& height) {
        int sumBefore = accumulate(height.begin(), height.end(), 0);
        int sumAfter = 0;
        stack<int> s;
        s.push(0);
        int stackbottom = height[0];
        for(int i = 1; i < height.size(); i ++){
            if(height[i] <= stackbottom){
                s.push(i);
            }else{
                while(!s.empty()){
                    height[s.top()] = stackbottom;
                    sumAfter += height[s.top()];
                    s.pop();
                }
                s.push(i);
                stackbottom = height[i];
            }
        }
        int top;
        if(!s.empty())
            top = height[s.top()];
        while(!s.empty()){            
            if(height[s.top()] > top)
                top = height[s.top()];
            sumAfter += top;
            s.pop();
        }
        return sumAfter - sumBefore;
    }

    // 单调栈
    int trap(vector<int>& height) {
        stack<int> s;
        s.push(0);
        int res = 0;
        for(int i = 0; i < height.size(); i ++){
            if(height[i] < height[s.top()])
                s.push(i);
            else if(height[i] == height[s.top()]){
                s.pop();
                s.push(i);
            }
            else{
                while(!s.empty() && height[i] > height[s.top()]){
                    int mid = s.top();
                    s.pop();
                    if(!s.empty()){
                        int h = min(height[i], height[s.top()]) - height[mid];
                        int l = i - s.top() - 1;
                        res += l * h;
                    }
                }
                s.push(i);
            }
        }
        return res;
    }

    // 动态规划
    int trap(vector<int>& height) {
        int n = height.size();
        vector<int> maxLeft(n, 0);
        vector<int> maxRight(n, 0);
        int res = 0;
        maxLeft[0] = height[0];
        for(int i = 1; i < n; i ++)
            maxLeft[i] = max(maxLeft[i - 1], height[i]);
        maxRight[n - 1] = height[n - 1];
        for(int i = n - 2; i >= 0; i --)
            maxRight[i] = max(maxRight[i + 1], height[i]);
        int sumAfter = 0;
        for(int i = 0; i < n ; i ++){
            res += min(maxLeft[i], maxRight[i]) - height[i];
        }
        return res;
    }
};