/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxdepth = INT_MIN;
    int leftvalue = 0;

    // 递归
    void getDepth(TreeNode* node, int depth){
        if(node == nullptr)
            return;
        if(node->left == nullptr && node->right == nullptr){
            if(depth > maxdepth){
                maxdepth = depth;
                leftvalue = node->val;
            }
            return;
        }
        getDepth(node->left, depth + 1);
        getDepth(node->right, depth + 1);
    }
    int findBottomLeftValue(TreeNode* root) {
        getDepth(root, 0);
        return leftvalue;
    }

    // 回溯
    void getDepth(TreeNode* node, int depth){
        if(node->left == nullptr && node->right == nullptr){
            if(depth > maxdepth){
                maxdepth = depth;
                leftvalue = node->val;
            }
            return;
        }
        if(node->left){
            depth ++;
            getDepth(node->left, depth);
            depth --;
        }
        if(node->right){
            depth ++;
            getDepth(node->right, depth);
            depth --;
        }
    }
    int findBottomLeftValue(TreeNode* root) {
        getDepth(root, 0);
        return leftvalue;
    }
};