/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool compare(TreeNode* leftnode, TreeNode* rightnode){
        if(!leftnode &&  !rightnode)
            return true;
        if(!leftnode || !rightnode || (leftnode->val != rightnode->val))
            return false;
        int outside = compare(leftnode->left, rightnode->right);
        int inside = compare(leftnode->right, rightnode->left);
        if(outside && inside)
            return true;
        else
            return false;
    }
    bool isSymmetric(TreeNode* root) {
        // if(root == nullptr)
        //     return true;
        // queue<TreeNode *> q;
        // q.push(root->left);
        // q.push(root->right);
        // while(!q.empty()){        
        //     TreeNode *nodeleft = q.front();
        //     q.pop();
        //     TreeNode *noderight = q.front();
        //     q.pop();
        //     if(!nodeleft && !noderight)
        //         continue;
        //     if(nodeleft == nullptr || noderight == nullptr || (nodeleft->val != noderight->val))
        //         return false;
        //     q.push(nodeleft->left);
        //     q.push(noderight->right);
        //     q.push(nodeleft->right);
        //     q.push(noderight->left);                   
        // }
        // return true;

        if(root == nullptr)
            return true;
        int res = compare(root->left, root->right);
        return res;
    }
};