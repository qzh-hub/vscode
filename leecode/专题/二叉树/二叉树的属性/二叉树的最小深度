/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        // if(root == nullptr)
        //     return 0;
        // int leftmin = minDepth(root->left);
        // int rightmin = minDepth(root->right);
        // if(leftmin == 0 && rightmin == 0)
        //     return 1;
        // else if(leftmin == 0)
        //     return rightmin + 1;
        // else if(rightmin == 0)
        //     return leftmin + 1;
        // else
        //     return min(leftmin, rightmin) + 1;

        if(root == nullptr)
            return 0;
        queue<TreeNode*> q;        
        q.push(root);
        int depth = 0;
        int res = INT_MAX;
        while(!q.empty()){
            int size = q.size();      
            depth ++;     
            while(size > 0){                              
                TreeNode* node = q.front();
                q.pop();
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
                if(!node->left && !node->right && depth != 1){                    
                    res = min(res, depth);
                    break;
                }                              
                size --;
            }
        }
        if(res == INT_MAX)
            res = 1;
        return res;
    }
};