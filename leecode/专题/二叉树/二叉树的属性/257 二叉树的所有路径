/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 回溯
    vector<string> res;
    string spath;
    vector<int> path;
    void backtrace(TreeNode* node, vector<int>& path, string spath){
        path.emplace_back(node->val);
        if(!node->left && !node->right){
            for(int i = 0; i < path.size() - 1; i ++){
                spath += to_string(path[i]);
                spath += "->";
            }
            spath += to_string(path[path.size() - 1]);
            res.emplace_back(spath);
            return;
        }
        if(node->left){
            backtrace(node->left, path, spath);
            path.pop_back();
        }
        if(node->right){
            backtrace(node->right, path, spath);
            path.pop_back();
        }    
        
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        backtrace(root, path, spath);
        return res;
    }

    // dfs
    vector<string> res;
    void dfs(TreeNode* root, string path){
        if(root == nullptr)
            return;
        path += to_string(root->val);
        if(!root->left && !root->right){           
            res.emplace_back(path);
            return;
        }else{
            dfs(root->left, path + "->");
            dfs(root->right, path + "->");
        }
        
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        string path;
        dfs(root, path);
        return res;
    }

    // 迭代
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        if(root == nullptr)
            return res;       
        vector<int> path;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()){
            TreeNode* node = s.top();
            s.pop();
            path.emplace_back(node->val);
            if(!node->left && !node->right){
                string spath;
                 for(int i = 0; i < path.size() - 1; i ++){
                    spath += to_string(path[i]);
                    spath += "->";
                }
                spath += to_string(path[path.size() - 1]);
                res.emplace_back(spath);
                path.pop_back();
            }
            if(node->right)
                s.push(node->right);
            if(node->left)
                s.push(node->left);
        }
        return res;
    }
};