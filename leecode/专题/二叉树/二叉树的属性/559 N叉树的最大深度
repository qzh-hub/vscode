/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    int maxDepth(Node* root) {
        // if(root == nullptr)
        //     return 0;
        // int depth = 0;
        // for(int i = 0; i < root->children.size(); i ++)
        //     depth = max(depth, maxDepth(root->children[i]));
        // return depth + 1;

        if(root == nullptr)
            return 0;
        queue<Node*> q;
        q.push(root);
        int res = 0;
        while(!q.empty()){
            int size = q.size();
            while(size > 0){
                Node* node = q.front();
                q.pop();
                for(int i = 0; i < node->children.size(); i ++){
                    if(node->children[i])
                        q.push(node->children[i]);
                }
                size --;
            }
            res ++;
        }
        return res;
    }
};