/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        // 迭代
        /*if(root == nullptr)
            return 0;
        int res = 0;
        queue<TreeNode*> q;        
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            int flag = 0;
            while(size > 0){              
                TreeNode* node = q.front();
                res += 1;
                q.pop();               
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right); 
                if(!node->left || (node->left != nullptr && !node->right))
                    flag = 1;               
                size --;
            }  
            if(flag == 1){
                res += q.size();
                break;
            }      
        }
        return res;*/

        // 普通递归
        /*if(root == nullptr)
            return 0;
        int nodenum = 1;
        nodenum += countNodes(root->left);
        nodenum += countNodes(root->right);
        return nodenum;*/

        // 完全二叉树特性
        if(root == nullptr)
            return 0;
        TreeNode* leftnode = root->left;
        TreeNode* rightnode = root->right;
        int leftdepth = 0, rightdepth = 0;
        while(leftnode){
            leftnode = leftnode->left;
            leftdepth ++;
        }
        while(rightnode){
            rightnode = rightnode->right;
            rightdepth ++;
        }
        if(leftdepth == rightdepth)
            return (2 << leftdepth) - 1;
        return countNodes(root->left) + countNodes(root->right) + 1;
    }
};