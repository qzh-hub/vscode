/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1 && !root2)
            return nullptr;
        TreeNode* res = new TreeNode(0);
        if(root1 != nullptr && root2 != nullptr){
            res->val = root1->val + root2->val;
            res->left = mergeTrees(root1->left, root2->left);
            res->right = mergeTrees(root1->right, root2->right);
        }         
        else if(!root2){
            res->val = root1->val;
            res->left = root1->left;
            res->right = root1->right;
        }
        else{
            res->val = root2->val;
            res->left = root2->left;
            res->right = root2->right;
        }
        return res;
    }


    if(root1 == nullptr)
        return root2;
    if(root2 == nullptr)
        return root1;
    TreeNode* res = new TreeNode(0);
    res->val = root1->val + root2->val;
    res->left = mergeTrees(root1->left, root2->left);
    res->right = mergeTrees(root1->right, root2->right);
    return res;


    if(t1 == nullptr)
            return t2;
    if(t2 == nullptr)
        return t1;
    t1->val += t2->val;
    t1->left = mergeTrees(t1->left, t2->left);
    t1->right = mergeTrees(t1->right, t2->right);
    return t1;


};