/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& nums, int l, int r){
        if(l > r)
            return nullptr;
        int maxvalue = INT_MIN;
        int index;
        for(int i = l; i <= r; i ++){
            if(nums[i] > maxvalue){
                maxvalue = nums[i];
                index = i;
            }
        }
        TreeNode* node = new TreeNode(maxvalue);
        node->left = helper(nums, l, index - 1);
        node->right = helper(nums, index + 1, r);
        return node;
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if(nums.size() == 0)
            return nullptr;
        return helper(nums, 0, nums.size() - 1);
    }
};