/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* build(vector<int>& inorder, int inL, int inR, vector<int>& postorder, int postL, int postR){
        if(inL > inR || postL > postR)
            return nullptr;
        TreeNode* node = new TreeNode(postorder[postR]);     
        int i = inL;
        while(inorder[i] != postorder[postR])
            i ++;     
        node->left = build(inorder, inL, i - 1, postorder, postL, postL + i - inL - 1);
        node->right = build(inorder, i + 1, inR, postorder, postL + i - inL, postR - 1);
        return node;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size() == 0)
            return nullptr;
        return build(inorder, 0, inorder.size() - 1, postorder, 0, postorder.size() - 1);
    }
};