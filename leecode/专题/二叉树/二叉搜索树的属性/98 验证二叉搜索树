/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& res){
        if(root == nullptr)
            return;
        inorder(root->left, res);
        res.emplace_back(root->val);
        inorder(root->right, res);
    }
    bool isValidBST(TreeNode* root) {
        vector<int> res;
        inorder(root, res);
        for(int i = 1; i < res.size(); i ++){
            if(res[i] <= res[i - 1])
                return false;
        }
        return true;
    }


    long maxval = LONG_MIN;
    bool isValidBST(TreeNode* root) {
        if(root == nullptr)
            return true;
        int l = isValidBST(root->left);
        if(maxval < root->val)
            maxval = root->val;
        else
            return false;
        int r = isValidBST(root->right);      
        return l && r;
    }
};