class Solution {
public:

    vector<vector<int>> res;
    vector<int> path;

    void backtrace(vector<int>& nums, vector<int>& visited){
        if(path.size() == nums.size()){
            res.emplace_back(path);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if(i > 0 && nums[i] == nums[i - 1] && visited[i - 1] == 0)
                continue;
            if(visited[i] == 0){
                visited[i] = 1;
                path.emplace_back(nums[i]);
                backtrace(nums, visited);
                path.pop_back();
                visited[i] = 0;
            }           
        }
    }

    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<int> visited(nums.size(), 0);
        sort(nums.begin(), nums.end());
        backtrace(nums, visited);       
        return res;
    }
};