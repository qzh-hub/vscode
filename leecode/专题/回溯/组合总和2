class Solution {
public:
    vector<vector<int>> res;
    vector<int> path;
    void backtrace(vector<int>& candidates, int target, int startIndex, int sum, vector<int>& visited){
        if(sum == target){
            res.emplace_back(path);
            return;
        }
        for(int i = startIndex; i < candidates.size(); i++){
            if(sum + candidates[i] > target)
                break;  
            if(i > 0 && candidates[i] == candidates[i-1] && visited[i-1] == 0)
                continue; 
            visited[i] = 1;        
            sum += candidates[i];
            path.emplace_back(candidates[i]);
            backtrace(candidates, target, i+1, sum, visited);
            path.pop_back();
            sum -= candidates[i];   
            visited[i] = 0;                    
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<int> visited(candidates.size(), 0);
        backtrace(candidates, target, 0, 0, visited);
        return res;
    }
};